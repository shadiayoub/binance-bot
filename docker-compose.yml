## Docker Compose file for Binance Futures Trading Bot
# Remove version line as it's obsolete in newer Docker Compose versions

services:
  # Main Trading Bot
  binance-bot:
    build: .
    container_name: binance-futures-bot
    restart: unless-stopped
    environment:
      # API Configuration
      - API_KEY=${API_KEY}
      - API_SECRET=${API_SECRET}
      - TESTNET=${TESTNET:-True}
      
      # Trading Configuration
      - SYMBOL=${SYMBOL:-BTCUSDT}
      - LEVERAGE=${LEVERAGE:-5}
      - RISK_PER_TRADE=${RISK_PER_TRADE:-0.01}
      - STOPLOSS_PCT=${STOPLOSS_PCT:-0.005}
      - TAKE_PROFIT_PCT=${TAKE_PROFIT_PCT:-0.01}
      - DAILY_MAX_LOSS_PCT=${DAILY_MAX_LOSS_PCT:-0.03}
      
      # Database Configuration
      - DB_FILE=${DB_FILE:-/app/data/async_bot_state.db}
      
      # Logging
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      # Persist database and logs
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      
      # Mount config files (optional)
      - ./config:/app/config:ro
    
    ports:
      # Optional: Expose monitoring port
      - "8080:8080"
    
    networks:
      - bot-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sqlite3; sqlite3.connect('/app/data/async_bot_state.db')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security: Run as non-root user
    user: "1000:1000"

  # Database Backup Service
  backup:
    image: alpine:latest
    container_name: bot-backup
    restart: "no"
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache sqlite
        cp /data/async_bot_state.db /backups/bot_backup_$$(date +%Y%m%d_%H%M%S).db
        echo 'Backup completed at $$(date)'
      "
    profiles:
      - backup
    depends_on:
      - binance-bot

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bot-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - bot-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Simple Monitoring Dashboard
  monitoring-dashboard:
    image: nginx:alpine
    container_name: bot-monitoring-dashboard
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./monitoring:/usr/share/nginx/html:ro
    networks:
      - bot-network
    depends_on:
      - binance-bot
    profiles:
      - monitoring

  # Development Database Viewer
  db-viewer:
    image: nouchka/sqlite3:latest
    container_name: bot-db-viewer
    restart: "no"
    volumes:
      - ./data:/data:ro
    command: ["sqlite3", "/data/async_bot_state.db"]
    profiles:
      - dev-tools
    depends_on:
      - binance-bot

  # Development Log Viewer
  log-viewer:
    image: alpine:latest
    container_name: bot-log-viewer
    restart: "no"
    volumes:
      - ./logs:/logs:ro
    command: ["tail", "-f", "/logs/bot.log"]
    profiles:
      - dev-tools
    depends_on:
      - binance-bot

  # Redis Cache (for future enhancements)
  redis:
    image: redis:alpine
    container_name: bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    profiles:
      - cache

  # PostgreSQL Database (alternative to SQLite)
  postgres:
    image: postgres:13-alpine
    container_name: bot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=binance_bot
      - POSTGRES_USER=${POSTGRES_USER:-bot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bot_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bot-network
    profiles:
      - postgres

  # Webhook Receiver (for notifications)
  webhook-receiver:
    image: nginx:alpine
    container_name: bot-webhook
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - ./webhooks:/usr/share/nginx/html:ro
    networks:
      - bot-network
    profiles:
      - webhooks

networks:
  bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  bot-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
